/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import jspb, { BinaryReader, BinaryWriter, Message } from 'google-protobuf'
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.Game.IncrementalMapUpdateRequest', null, global)
goog.exportSymbol('proto.Game.IncrementalMapUpdateResponse', null, global)
goog.exportSymbol('proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate', null, global)
goog.exportSymbol('proto.Game.MiscStateUpdateRequest', null, global)
goog.exportSymbol('proto.Game.MiscStateUpdateResponse', null, global)
goog.exportSymbol('proto.Game.MiscStateUpdateResponse.Notification', null, global)
goog.exportSymbol('proto.Game.MiscStateUpdateResponse.PixelBucket', null, global)
goog.exportSymbol('proto.Game.MiscStateUpdateResponse.PowerUps', null, global)
goog.exportSymbol('proto.Game.MiscStateUpdateResponse.Scores', null, global)
goog.exportSymbol('proto.Game.PixelGuild', null, global)
goog.exportSymbol('proto.Game.PixelTypes', null, global)
goog.exportSymbol('proto.Game.PixelUser', null, global)
goog.exportSymbol('proto.Game.RelativeCoordinate', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.IncrementalMapUpdateRequest = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.IncrementalMapUpdateRequest, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.IncrementalMapUpdateRequest.displayName = 'proto.Game.IncrementalMapUpdateRequest'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.IncrementalMapUpdateRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.IncrementalMapUpdateRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.IncrementalMapUpdateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.IncrementalMapUpdateRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.IncrementalMapUpdateRequest}
 */
proto.Game.IncrementalMapUpdateRequest.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.IncrementalMapUpdateRequest()
  return proto.Game.IncrementalMapUpdateRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.IncrementalMapUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.IncrementalMapUpdateRequest}
 */
proto.Game.IncrementalMapUpdateRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.IncrementalMapUpdateRequest.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.IncrementalMapUpdateRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.IncrementalMapUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.IncrementalMapUpdateRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.IncrementalMapUpdateResponse = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, proto.Game.IncrementalMapUpdateResponse.repeatedFields_, null)
}
goog.inherits(proto.Game.IncrementalMapUpdateResponse, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.IncrementalMapUpdateResponse.displayName = 'proto.Game.IncrementalMapUpdateResponse'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Game.IncrementalMapUpdateResponse.repeatedFields_ = [1]

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.IncrementalMapUpdateResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.IncrementalMapUpdateResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.IncrementalMapUpdateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.IncrementalMapUpdateResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        updatesList: Message.toObjectList(
          msg.getUpdatesList(),
          proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.toObject,
          includeInstance
        )
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.IncrementalMapUpdateResponse}
 */
proto.Game.IncrementalMapUpdateResponse.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.IncrementalMapUpdateResponse()
  return proto.Game.IncrementalMapUpdateResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.IncrementalMapUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.IncrementalMapUpdateResponse}
 */
proto.Game.IncrementalMapUpdateResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate()
        reader.readMessage(
          value,
          proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.deserializeBinaryFromReader
        )
        msg.addUpdates(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.IncrementalMapUpdateResponse.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.IncrementalMapUpdateResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.IncrementalMapUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.IncrementalMapUpdateResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getUpdatesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.serializeBinaryToWriter
    )
  }
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.displayName =
    'proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        spawnrelativecoordinate:
          (f = msg.getSpawnrelativecoordinate()) && proto.Game.RelativeCoordinate.toObject(includeInstance, f),
        type: Message.getFieldWithDefault(msg, 2, 0),
        guild: Message.getFieldWithDefault(msg, 3, 0),
        owner: (f = msg.getOwner()) && proto.Game.PixelUser.toObject(includeInstance, f),
        backgroundgraphic: msg.getBackgroundgraphic_asB64()
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate()
  return proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.Game.RelativeCoordinate()
        reader.readMessage(value, proto.Game.RelativeCoordinate.deserializeBinaryFromReader)
        msg.setSpawnrelativecoordinate(value)
        break
      case 2:
        var value = /** @type {!proto.Game.PixelTypes} */ (reader.readEnum())
        msg.setType(value)
        break
      case 3:
        var value = /** @type {!proto.Game.PixelGuild} */ (reader.readEnum())
        msg.setGuild(value)
        break
      case 4:
        var value = new proto.Game.PixelUser()
        reader.readMessage(value, proto.Game.PixelUser.deserializeBinaryFromReader)
        msg.setOwner(value)
        break
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setBackgroundgraphic(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getSpawnrelativecoordinate()
  if (f != null) {
    writer.writeMessage(1, f, proto.Game.RelativeCoordinate.serializeBinaryToWriter)
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getGuild()
  if (f !== 0.0) {
    writer.writeEnum(3, f)
  }
  f = message.getOwner()
  if (f != null) {
    writer.writeMessage(4, f, proto.Game.PixelUser.serializeBinaryToWriter)
  }
  f = message.getBackgroundgraphic_asU8()
  if (f.length > 0) {
    writer.writeBytes(5, f)
  }
}

/**
 * optional RelativeCoordinate spawnRelativeCoordinate = 1;
 * @return {?proto.Game.RelativeCoordinate}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getSpawnrelativecoordinate = function () {
  return /** @type{?proto.Game.RelativeCoordinate} */ (Message.getWrapperField(this, proto.Game.RelativeCoordinate, 1))
}

/** @param {?proto.Game.RelativeCoordinate|undefined} value */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.setSpawnrelativecoordinate = function (value) {
  Message.setWrapperField(this, 1, value)
}

proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.clearSpawnrelativecoordinate = function () {
  this.setSpawnrelativecoordinate(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.hasSpawnrelativecoordinate = function () {
  return Message.getField(this, 1) != null
}

/**
 * optional PixelTypes type = 2;
 * @return {!proto.Game.PixelTypes}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getType = function () {
  return /** @type {!proto.Game.PixelTypes} */ (Message.getFieldWithDefault(this, 2, 0))
}

/** @param {!proto.Game.PixelTypes} value */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.setType = function (value) {
  Message.setProto3EnumField(this, 2, value)
}

/**
 * optional PixelGuild guild = 3;
 * @return {!proto.Game.PixelGuild}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getGuild = function () {
  return /** @type {!proto.Game.PixelGuild} */ (Message.getFieldWithDefault(this, 3, 0))
}

/** @param {!proto.Game.PixelGuild} value */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.setGuild = function (value) {
  Message.setProto3EnumField(this, 3, value)
}

/**
 * optional PixelUser owner = 4;
 * @return {?proto.Game.PixelUser}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getOwner = function () {
  return /** @type{?proto.Game.PixelUser} */ (Message.getWrapperField(this, proto.Game.PixelUser, 4))
}

/** @param {?proto.Game.PixelUser|undefined} value */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.setOwner = function (value) {
  Message.setWrapperField(this, 4, value)
}

proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.clearOwner = function () {
  this.setOwner(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.hasOwner = function () {
  return Message.getField(this, 4) != null
}

/**
 * optional bytes backgroundGraphic = 5;
 * @return {string}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getBackgroundgraphic = function () {
  return /** @type {string} */ (Message.getFieldWithDefault(this, 5, ''))
}

/**
 * optional bytes backgroundGraphic = 5;
 * This is a type-conversion wrapper around `getBackgroundgraphic()`
 * @return {string}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getBackgroundgraphic_asB64 = function () {
  return /** @type {string} */ (Message.bytesAsB64(this.getBackgroundgraphic()))
}

/**
 * optional bytes backgroundGraphic = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBackgroundgraphic()`
 * @return {!Uint8Array}
 */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.getBackgroundgraphic_asU8 = function () {
  return /** @type {!Uint8Array} */ (Message.bytesAsU8(this.getBackgroundgraphic()))
}

/** @param {!(string|Uint8Array)} value */
proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate.prototype.setBackgroundgraphic = function (value) {
  Message.setProto3BytesField(this, 5, value)
}

/**
 * repeated IncrementalMapUpdate updates = 1;
 * @return {!Array<!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate>}
 */
proto.Game.IncrementalMapUpdateResponse.prototype.getUpdatesList = function () {
  return /** @type{!Array<!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate>} */ (
    Message.getRepeatedWrapperField(this, proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate, 1)
  )
}

/** @param {!Array<!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate>} value */
proto.Game.IncrementalMapUpdateResponse.prototype.setUpdatesList = function (value) {
  Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate}
 */
proto.Game.IncrementalMapUpdateResponse.prototype.addUpdates = function (opt_value, opt_index) {
  return Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Game.IncrementalMapUpdateResponse.IncrementalMapUpdate,
    opt_index
  )
}

proto.Game.IncrementalMapUpdateResponse.prototype.clearUpdatesList = function () {
  this.setUpdatesList([])
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.MiscStateUpdateRequest = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.MiscStateUpdateRequest, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.MiscStateUpdateRequest.displayName = 'proto.Game.MiscStateUpdateRequest'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.MiscStateUpdateRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.MiscStateUpdateRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.MiscStateUpdateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.MiscStateUpdateRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.MiscStateUpdateRequest}
 */
proto.Game.MiscStateUpdateRequest.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.MiscStateUpdateRequest()
  return proto.Game.MiscStateUpdateRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.MiscStateUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.MiscStateUpdateRequest}
 */
proto.Game.MiscStateUpdateRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.MiscStateUpdateRequest.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.MiscStateUpdateRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.MiscStateUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.MiscStateUpdateRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.MiscStateUpdateResponse = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, proto.Game.MiscStateUpdateResponse.repeatedFields_, null)
}
goog.inherits(proto.Game.MiscStateUpdateResponse, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.MiscStateUpdateResponse.displayName = 'proto.Game.MiscStateUpdateResponse'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Game.MiscStateUpdateResponse.repeatedFields_ = [2, 3]

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.MiscStateUpdateResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.MiscStateUpdateResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.MiscStateUpdateResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.MiscStateUpdateResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        pixelbucket:
          (f = msg.getPixelbucket()) && proto.Game.MiscStateUpdateResponse.PixelBucket.toObject(includeInstance, f),
        scoresList: Message.toObjectList(
          msg.getScoresList(),
          proto.Game.MiscStateUpdateResponse.Scores.toObject,
          includeInstance
        ),
        powerupsList: Message.toObjectList(
          msg.getPowerupsList(),
          proto.Game.MiscStateUpdateResponse.PowerUps.toObject,
          includeInstance
        ),
        notification:
          (f = msg.getNotification()) && proto.Game.MiscStateUpdateResponse.Notification.toObject(includeInstance, f),
        powerupupdate: Message.getFieldWithDefault(msg, 5, false)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.MiscStateUpdateResponse}
 */
proto.Game.MiscStateUpdateResponse.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.MiscStateUpdateResponse()
  return proto.Game.MiscStateUpdateResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.MiscStateUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.MiscStateUpdateResponse}
 */
proto.Game.MiscStateUpdateResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.Game.MiscStateUpdateResponse.PixelBucket()
        reader.readMessage(value, proto.Game.MiscStateUpdateResponse.PixelBucket.deserializeBinaryFromReader)
        msg.setPixelbucket(value)
        break
      case 2:
        var value = new proto.Game.MiscStateUpdateResponse.Scores()
        reader.readMessage(value, proto.Game.MiscStateUpdateResponse.Scores.deserializeBinaryFromReader)
        msg.addScores(value)
        break
      case 3:
        var value = new proto.Game.MiscStateUpdateResponse.PowerUps()
        reader.readMessage(value, proto.Game.MiscStateUpdateResponse.PowerUps.deserializeBinaryFromReader)
        msg.addPowerups(value)
        break
      case 4:
        var value = new proto.Game.MiscStateUpdateResponse.Notification()
        reader.readMessage(value, proto.Game.MiscStateUpdateResponse.Notification.deserializeBinaryFromReader)
        msg.setNotification(value)
        break
      case 5:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setPowerupupdate(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.MiscStateUpdateResponse.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.MiscStateUpdateResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.MiscStateUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.MiscStateUpdateResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPixelbucket()
  if (f != null) {
    writer.writeMessage(1, f, proto.Game.MiscStateUpdateResponse.PixelBucket.serializeBinaryToWriter)
  }
  f = message.getScoresList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.Game.MiscStateUpdateResponse.Scores.serializeBinaryToWriter)
  }
  f = message.getPowerupsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.Game.MiscStateUpdateResponse.PowerUps.serializeBinaryToWriter)
  }
  f = message.getNotification()
  if (f != null) {
    writer.writeMessage(4, f, proto.Game.MiscStateUpdateResponse.Notification.serializeBinaryToWriter)
  }
  f = message.getPowerupupdate()
  if (f) {
    writer.writeBool(5, f)
  }
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.MiscStateUpdateResponse.PixelBucket = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.MiscStateUpdateResponse.PixelBucket, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.MiscStateUpdateResponse.PixelBucket.displayName = 'proto.Game.MiscStateUpdateResponse.PixelBucket'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.MiscStateUpdateResponse.PixelBucket.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.MiscStateUpdateResponse.PixelBucket} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.MiscStateUpdateResponse.PixelBucket.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        amount: Message.getFieldWithDefault(msg, 1, 0),
        maxamount: Message.getFieldWithDefault(msg, 2, 0),
        increaseperminute: +Message.getFieldWithDefault(msg, 3, 0.0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.MiscStateUpdateResponse.PixelBucket}
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.MiscStateUpdateResponse.PixelBucket()
  return proto.Game.MiscStateUpdateResponse.PixelBucket.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.MiscStateUpdateResponse.PixelBucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.MiscStateUpdateResponse.PixelBucket}
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setAmount(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setMaxamount(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setIncreaseperminute(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.MiscStateUpdateResponse.PixelBucket.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.MiscStateUpdateResponse.PixelBucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAmount()
  if (f !== 0) {
    writer.writeUint32(1, f)
  }
  f = message.getMaxamount()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
  f = message.getIncreaseperminute()
  if (f !== 0.0) {
    writer.writeFloat(3, f)
  }
}

/**
 * optional uint32 amount = 1;
 * @return {number}
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.getAmount = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.setAmount = function (value) {
  Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint32 maxAmount = 2;
 * @return {number}
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.getMaxamount = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 2, 0))
}

/** @param {number} value */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.setMaxamount = function (value) {
  Message.setProto3IntField(this, 2, value)
}

/**
 * optional float increasePerMinute = 3;
 * @return {number}
 */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.getIncreaseperminute = function () {
  return /** @type {number} */ (+Message.getFieldWithDefault(this, 3, 0.0))
}

/** @param {number} value */
proto.Game.MiscStateUpdateResponse.PixelBucket.prototype.setIncreaseperminute = function (value) {
  Message.setProto3FloatField(this, 3, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.MiscStateUpdateResponse.Scores = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.MiscStateUpdateResponse.Scores, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.MiscStateUpdateResponse.Scores.displayName = 'proto.Game.MiscStateUpdateResponse.Scores'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.MiscStateUpdateResponse.Scores.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.MiscStateUpdateResponse.Scores.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.MiscStateUpdateResponse.Scores} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.MiscStateUpdateResponse.Scores.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        guild: Message.getFieldWithDefault(msg, 1, 0),
        amount: Message.getFieldWithDefault(msg, 2, 0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.MiscStateUpdateResponse.Scores}
 */
proto.Game.MiscStateUpdateResponse.Scores.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.MiscStateUpdateResponse.Scores()
  return proto.Game.MiscStateUpdateResponse.Scores.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.MiscStateUpdateResponse.Scores} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.MiscStateUpdateResponse.Scores}
 */
proto.Game.MiscStateUpdateResponse.Scores.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.Game.PixelGuild} */ (reader.readEnum())
        msg.setGuild(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setAmount(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.MiscStateUpdateResponse.Scores.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.MiscStateUpdateResponse.Scores.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.MiscStateUpdateResponse.Scores} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.MiscStateUpdateResponse.Scores.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getGuild()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getAmount()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
}

/**
 * optional PixelGuild guild = 1;
 * @return {!proto.Game.PixelGuild}
 */
proto.Game.MiscStateUpdateResponse.Scores.prototype.getGuild = function () {
  return /** @type {!proto.Game.PixelGuild} */ (Message.getFieldWithDefault(this, 1, 0))
}

/** @param {!proto.Game.PixelGuild} value */
proto.Game.MiscStateUpdateResponse.Scores.prototype.setGuild = function (value) {
  Message.setProto3EnumField(this, 1, value)
}

/**
 * optional uint32 amount = 2;
 * @return {number}
 */
proto.Game.MiscStateUpdateResponse.Scores.prototype.getAmount = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 2, 0))
}

/** @param {number} value */
proto.Game.MiscStateUpdateResponse.Scores.prototype.setAmount = function (value) {
  Message.setProto3IntField(this, 2, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.MiscStateUpdateResponse.PowerUps = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.MiscStateUpdateResponse.PowerUps, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.MiscStateUpdateResponse.PowerUps.displayName = 'proto.Game.MiscStateUpdateResponse.PowerUps'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.MiscStateUpdateResponse.PowerUps.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.MiscStateUpdateResponse.PowerUps.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.MiscStateUpdateResponse.PowerUps} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.MiscStateUpdateResponse.PowerUps.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        powerupid: Message.getFieldWithDefault(msg, 1, 0),
        directed: Message.getFieldWithDefault(msg, 2, false),
        name: Message.getFieldWithDefault(msg, 3, ''),
        description: Message.getFieldWithDefault(msg, 4, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.MiscStateUpdateResponse.PowerUps}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.MiscStateUpdateResponse.PowerUps()
  return proto.Game.MiscStateUpdateResponse.PowerUps.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.MiscStateUpdateResponse.PowerUps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.MiscStateUpdateResponse.PowerUps}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setPowerupid(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setDirected(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setDescription(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.MiscStateUpdateResponse.PowerUps.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.MiscStateUpdateResponse.PowerUps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.MiscStateUpdateResponse.PowerUps.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getPowerupid()
  if (f !== 0) {
    writer.writeUint32(1, f)
  }
  f = message.getDirected()
  if (f) {
    writer.writeBool(2, f)
  }
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getDescription()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
}

/**
 * optional uint32 powerUpId = 1;
 * @return {number}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.getPowerupid = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.setPowerupid = function (value) {
  Message.setProto3IntField(this, 1, value)
}

/**
 * optional bool Directed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.getDirected = function () {
  return /** @type {boolean} */ (Message.getFieldWithDefault(this, 2, false))
}

/** @param {boolean} value */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.setDirected = function (value) {
  Message.setProto3BooleanField(this, 2, value)
}

/**
 * optional string name = 3;
 * @return {string}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.getName = function () {
  return /** @type {string} */ (Message.getFieldWithDefault(this, 3, ''))
}

/** @param {string} value */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.setName = function (value) {
  Message.setProto3StringField(this, 3, value)
}

/**
 * optional string description = 4;
 * @return {string}
 */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.getDescription = function () {
  return /** @type {string} */ (Message.getFieldWithDefault(this, 4, ''))
}

/** @param {string} value */
proto.Game.MiscStateUpdateResponse.PowerUps.prototype.setDescription = function (value) {
  Message.setProto3StringField(this, 4, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.MiscStateUpdateResponse.Notification = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.MiscStateUpdateResponse.Notification, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.MiscStateUpdateResponse.Notification.displayName = 'proto.Game.MiscStateUpdateResponse.Notification'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.MiscStateUpdateResponse.Notification.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.MiscStateUpdateResponse.Notification.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.MiscStateUpdateResponse.Notification} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.MiscStateUpdateResponse.Notification.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        message: Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.MiscStateUpdateResponse.Notification}
 */
proto.Game.MiscStateUpdateResponse.Notification.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.MiscStateUpdateResponse.Notification()
  return proto.Game.MiscStateUpdateResponse.Notification.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.MiscStateUpdateResponse.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.MiscStateUpdateResponse.Notification}
 */
proto.Game.MiscStateUpdateResponse.Notification.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.MiscStateUpdateResponse.Notification.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.MiscStateUpdateResponse.Notification.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.MiscStateUpdateResponse.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.MiscStateUpdateResponse.Notification.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string message = 1;
 * @return {string}
 */
proto.Game.MiscStateUpdateResponse.Notification.prototype.getMessage = function () {
  return /** @type {string} */ (Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.Game.MiscStateUpdateResponse.Notification.prototype.setMessage = function (value) {
  Message.setProto3StringField(this, 1, value)
}

/**
 * optional PixelBucket pixelBucket = 1;
 * @return {?proto.Game.MiscStateUpdateResponse.PixelBucket}
 */
proto.Game.MiscStateUpdateResponse.prototype.getPixelbucket = function () {
  return /** @type{?proto.Game.MiscStateUpdateResponse.PixelBucket} */ (
    Message.getWrapperField(this, proto.Game.MiscStateUpdateResponse.PixelBucket, 1)
  )
}

/** @param {?proto.Game.MiscStateUpdateResponse.PixelBucket|undefined} value */
proto.Game.MiscStateUpdateResponse.prototype.setPixelbucket = function (value) {
  Message.setWrapperField(this, 1, value)
}

proto.Game.MiscStateUpdateResponse.prototype.clearPixelbucket = function () {
  this.setPixelbucket(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.MiscStateUpdateResponse.prototype.hasPixelbucket = function () {
  return Message.getField(this, 1) != null
}

/**
 * repeated Scores scores = 2;
 * @return {!Array<!proto.Game.MiscStateUpdateResponse.Scores>}
 */
proto.Game.MiscStateUpdateResponse.prototype.getScoresList = function () {
  return /** @type{!Array<!proto.Game.MiscStateUpdateResponse.Scores>} */ (
    Message.getRepeatedWrapperField(this, proto.Game.MiscStateUpdateResponse.Scores, 2)
  )
}

/** @param {!Array<!proto.Game.MiscStateUpdateResponse.Scores>} value */
proto.Game.MiscStateUpdateResponse.prototype.setScoresList = function (value) {
  Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.Game.MiscStateUpdateResponse.Scores=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.MiscStateUpdateResponse.Scores}
 */
proto.Game.MiscStateUpdateResponse.prototype.addScores = function (opt_value, opt_index) {
  return Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Game.MiscStateUpdateResponse.Scores, opt_index)
}

proto.Game.MiscStateUpdateResponse.prototype.clearScoresList = function () {
  this.setScoresList([])
}

/**
 * repeated PowerUps powerUps = 3;
 * @return {!Array<!proto.Game.MiscStateUpdateResponse.PowerUps>}
 */
proto.Game.MiscStateUpdateResponse.prototype.getPowerupsList = function () {
  return /** @type{!Array<!proto.Game.MiscStateUpdateResponse.PowerUps>} */ (
    Message.getRepeatedWrapperField(this, proto.Game.MiscStateUpdateResponse.PowerUps, 3)
  )
}

/** @param {!Array<!proto.Game.MiscStateUpdateResponse.PowerUps>} value */
proto.Game.MiscStateUpdateResponse.prototype.setPowerupsList = function (value) {
  Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.Game.MiscStateUpdateResponse.PowerUps=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Game.MiscStateUpdateResponse.PowerUps}
 */
proto.Game.MiscStateUpdateResponse.prototype.addPowerups = function (opt_value, opt_index) {
  return Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Game.MiscStateUpdateResponse.PowerUps, opt_index)
}

proto.Game.MiscStateUpdateResponse.prototype.clearPowerupsList = function () {
  this.setPowerupsList([])
}

/**
 * optional Notification notification = 4;
 * @return {?proto.Game.MiscStateUpdateResponse.Notification}
 */
proto.Game.MiscStateUpdateResponse.prototype.getNotification = function () {
  return /** @type{?proto.Game.MiscStateUpdateResponse.Notification} */ (
    Message.getWrapperField(this, proto.Game.MiscStateUpdateResponse.Notification, 4)
  )
}

/** @param {?proto.Game.MiscStateUpdateResponse.Notification|undefined} value */
proto.Game.MiscStateUpdateResponse.prototype.setNotification = function (value) {
  Message.setWrapperField(this, 4, value)
}

proto.Game.MiscStateUpdateResponse.prototype.clearNotification = function () {
  this.setNotification(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Game.MiscStateUpdateResponse.prototype.hasNotification = function () {
  return Message.getField(this, 4) != null
}

/**
 * optional bool powerupUpdate = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Game.MiscStateUpdateResponse.prototype.getPowerupupdate = function () {
  return /** @type {boolean} */ (Message.getFieldWithDefault(this, 5, false))
}

/** @param {boolean} value */
proto.Game.MiscStateUpdateResponse.prototype.setPowerupupdate = function (value) {
  Message.setProto3BooleanField(this, 5, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.PixelUser = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.PixelUser, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.PixelUser.displayName = 'proto.Game.PixelUser'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.PixelUser.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.PixelUser.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.PixelUser} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.PixelUser.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: Message.getFieldWithDefault(msg, 1, 0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.PixelUser}
 */
proto.Game.PixelUser.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.PixelUser()
  return proto.Game.PixelUser.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.PixelUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.PixelUser}
 */
proto.Game.PixelUser.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.PixelUser.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.PixelUser.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.PixelUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.PixelUser.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f !== 0) {
    writer.writeInt32(1, f)
  }
}

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Game.PixelUser.prototype.getId = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.Game.PixelUser.prototype.setId = function (value) {
  Message.setProto3IntField(this, 1, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game.RelativeCoordinate = function (opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Game.RelativeCoordinate, Message)
if (goog.DEBUG && !COMPILED) {
  proto.Game.RelativeCoordinate.displayName = 'proto.Game.RelativeCoordinate'
}

if (Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Game.RelativeCoordinate.prototype.toObject = function (opt_includeInstance) {
    return proto.Game.RelativeCoordinate.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Game.RelativeCoordinate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Game.RelativeCoordinate.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        x: Message.getFieldWithDefault(msg, 1, 0),
        y: Message.getFieldWithDefault(msg, 2, 0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game.RelativeCoordinate}
 */
proto.Game.RelativeCoordinate.deserializeBinary = function (bytes) {
  var reader = new BinaryReader(bytes)
  var msg = new proto.Game.RelativeCoordinate()
  return proto.Game.RelativeCoordinate.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game.RelativeCoordinate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game.RelativeCoordinate}
 */
proto.Game.RelativeCoordinate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setX(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setY(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.RelativeCoordinate.prototype.serializeBinary = function () {
  var writer = new BinaryWriter()
  proto.Game.RelativeCoordinate.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game.RelativeCoordinate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.RelativeCoordinate.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getX()
  if (f !== 0) {
    writer.writeInt32(1, f)
  }
  f = message.getY()
  if (f !== 0) {
    writer.writeInt32(2, f)
  }
}

/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.Game.RelativeCoordinate.prototype.getX = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.Game.RelativeCoordinate.prototype.setX = function (value) {
  Message.setProto3IntField(this, 1, value)
}

/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.Game.RelativeCoordinate.prototype.getY = function () {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 2, 0))
}

/** @param {number} value */
proto.Game.RelativeCoordinate.prototype.setY = function (value) {
  Message.setProto3IntField(this, 2, value)
}

/**
 * @enum {number}
 */
proto.Game.PixelTypes = {
  NORMAL: 0,
  MAPBORDER: 1,
  SPAWN: 2,
  FOGOFWAR: 3
}

/**
 * @enum {number}
 */
proto.Game.PixelGuild = {
  NOBODY: 0,
  TIETOKILTA: 1,
  ALGO: 2,
  CLUSTER: 3,
  OULUNTIETOTEEKKARIT: 4,
  TIETOTEEKKARIKILTA: 5,
  DIGIT: 6,
  SOSA: 7,
  DATE: 8,
  TUTTI: 9
}

export const PixelTypes = proto.Game.PixelTypes
export const PixelGuild = proto.Game.PixelGuild
export const RelativeCoordinate = proto.Game.RelativeCoordinate
export const PixelUser = proto.Game.PixelUser
export const MiscStateUpdateRequest = proto.Game.MiscStateUpdateRequest
export const MiscStateUpdateResponse = proto.Game.MiscStateUpdateResponse
export const IncrementalMapUpdateRequest = proto.Game.IncrementalMapUpdateRequest
export const IncrementalMapUpdateResponse = proto.Game.IncrementalMapUpdateResponse

export default proto.Game
